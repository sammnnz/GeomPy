from __future__ import annotations
from matplotlib.figure import Figure
from typing import Any, Generator, Optional, Sequence, Tuple, Type, TYPE_CHECKING, Union
from _typing import Point2D, RealNumber

def generate_random_polygon(center: Point2D, radius: RealNumber = ..., verts_num: int = ...) -> polygon: ...

class polygon(object):
    # noinspection PyShadowingNames
    def is_inner_point(self, point: Point2D) -> bool: ...
    def __getitem__(self, index: int) -> Point2D: ...
    def __init__(self, *args: Point2D) -> None: ...
    @staticmethod
    def __new__(cls: Type[polygon], *args: Point2D, **kwargs: Any) -> polygon: ...
    verts: Tuple[Point2D, ...] = ...

# https://github.com/python/typeshed/issues/7855#issuecomment-1128857842
if TYPE_CHECKING:
    _Tuple = Tuple[RealNumber]
else:
    _Tuple = Tuple

class Render(object):
    fig: Optional[Figure]
    def __init__(self) -> None: ...
    def display(self, x: Optional[RealNumber] = ..., y: Optional[RealNumber] = ..., block: bool = ...) -> None: ...
    def points(self, *points: Point2D, c: str = ..., s: Union[RealNumber, Sequence[RealNumber]] = ...) -> None: ...
    def polygon(self, p: polygon, c: str = ...) -> None: ...

def random_points(count: int, radius: RealNumber, x: RealNumber, y: RealNumber) -> Generator[Point2D, Any, None]: ...